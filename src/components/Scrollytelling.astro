---
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import maplibregl from "maplibre-gl";
import type {
  FillLayerSpecification,
  CircleLayerSpecification,
  LineLayerSpecification,
  SymbolLayerSpecification,
  LngLatLike
} from "maplibre-gl";
import markdownContent from "../pages/scrollytelling_steps.md?raw"; // Assuming markdown is under pages directory

import fs from "fs";
import yaml from "js-yaml";

// Load and parse the YAML file
const fileContents = fs.readFileSync(
  "src/pages/scrollytelling_steps.yaml",
  "utf8"
);
interface MapStep {
  title: string;
  description: string;
  center: [number, number];
  zoom: number;
  pitch?: number;
  bearing?: number;
  media?: string;
}

const mapData: MapStep[] = yaml.load(fileContents) as MapStep[];

const headings = markdownContent.match(/#+\s.+/g)?.map((heading) => {
  const text = heading.replace(/#+\s/, "");
  const slug = text.toLowerCase().replace(/\s/g, "-");
  const content = markdownContent.split(heading)[1].split(/#+\s/)[0];
  return { text, slug, content };
});

export interface Props {
  latitude: number;
  longitude: number;
  zoom: number;
  mapstyle: string;
  container: string;

  /** If `false`, the map will not respond to interaction.  This is a static map built with the full web map rendering API. */
  interactive?: boolean;
  containerstyle?: string;
  pitch?: number;
  bearing?: number;
  layers?: GeoJSONFeatureLayer[];
}

export interface GeoJSONFeatureLayer {
  dataType: "geojson";
  id: string;
  url: string;
  layerType:
    | "symbol"
    | "fill"
    | "custom"
    | "raster"
    | "line"
    | "circle"
    | "heatmap"
    | "fill-extrusion"
    | "hillshade"
    | "background";
  paint?:
    | FillLayerSpecification
    | LineLayerSpecification
    | CircleLayerSpecification
    | SymbolLayerSpecification;
}

const {
  latitude,
  longitude,
  zoom,
  mapstyle,
  container,
  interactive,
  containerstyle = "height: 61.8vh",
  pitch,
  bearing,
  layers,
} = Astro.props;
const layersJson = layers ? JSON.stringify(layers) : undefined;
---

<div class="scrollytelling-container">
  <!-- Map Container -->
  <div
    id={container}
    class="maplibre-inline map-container"
    style={{ width: "100vw", height: "100vh" }}
  >
    <maplibre-map
      data-latitude={latitude}
      data-longitude={longitude}
      data-zoom={zoom}
      data-mapstyle={mapstyle}
      data-container={container}
      data-interactive={interactive}
      data-containerstyle={containerstyle}
      data-pitch={pitch}
      data-bearing={bearing}
      data-layers={layersJson}
    >
      <link
        rel="stylesheet"
        href="https://unpkg.com/maplibre-gl/dist/maplibre-gl.css"
      />
      <script>
        class MapLibreMap extends HTMLElement {
          constructor() {
            super();
            var map = new maplibregl.Map({
              container: this.dataset.container || "maplibre-map",
              interactive: this.dataset.interactive
                ? JSON.parse(this.dataset.interactive)
                : false,
              center: [
                this.dataset.longitude ? parseFloat(this.dataset.longitude) : 0,
                this.dataset.latitude ? parseFloat(this.dataset.latitude) : 0,
              ],
              zoom: this.dataset.zoom
                ? parseFloat(this.dataset.zoom)
                : undefined,
              style: this.dataset.mapstyle,
            });

            map.on("load", () => {
              const sections = document.querySelectorAll("section");

              const observer = new IntersectionObserver((entries) => {
                entries.forEach((entry) => {
                  if (entry.isIntersecting) {                    
                    const centerAttr = entry.target.getAttribute("data-center");
                    const center = centerAttr ? JSON.parse(centerAttr) : undefined;
                    const zoom = entry.target.getAttribute("data-zoom");

                    // Update the MapLibre map
                    map.flyTo({
                      center: center as maplibregl.LngLatLike,
                      zoom: zoom ? parseFloat(zoom) : undefined,
                      essential: true,
                    });
                  }
                });
              });

              sections.forEach((section) => observer.observe(section));
            });
          }
        }

        window.customElements.define("maplibre-map", MapLibreMap);
      </script>
    </maplibre-map>
  </div>

  <!-- Scrolling Content -->
  <main>
    {
      mapData.map((step, index) => (
        <section
          id={`section-${index}`}
          data-center={JSON.stringify(step.center)}
          data-zoom={step.zoom}
          data-pitch={step.pitch}
          data-bearing={step.bearing}
        >
          <h2>{step.title}</h2>
          <p>{step.description}</p>
          {step.media ? <img src={step.media} alt={step.title} /> : null}
        </section>
      ))
    }
  </main>
</div>
